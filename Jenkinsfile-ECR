@Library('my-shared-library') _


pipeline {

  agent any
  
  parameters {
	choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
    string(name: 'docker_repo', description: "Name of docker repository", defaultValue: 'vikashashoke')
    string(name: 'aws_region', description: "region of ECR repository", defaultValue: 'us-east-1')
    string(name: 'aws_account_id', description: "AWS ACCOUNT ID of ECR repository", defaultValue: '496157679619')
  }
  environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }
      
    stages {
        stage('Git Checkout') {
            when {
				expression { params.action == 'create' }
			}
            steps {
                gitCheckout(
                    branch: "main",
                    url: "https://github.com/vikash-kumar01/springboot_k8s_application.git"
                )
            }
        }
    //     stage('Unit Test Maven'){
    //         when {
				// expression { params.action == 'create' }
    //         }
    // 	   steps{
    // 	    script{
    //     		mvnTest()
    // 	    }
    // 		  }
	   // }
 	  //  stage('Maven Integration test'){
    //         when {
				// expression { params.action == 'create' } 			}

    //  		steps {
    //  	script{
    //      		 integrationTest()
    //  		}
 			// }
	   // }
    //     stage('Static code analysis') {
    //         when {
    //             expression { params.action == 'create' }
    //         }
    //         steps {
    //             script {
    //                 def sonarCredentialId = 'sonar-api'
    //                 StaticCodeAnalysis(sonarCredentialId)
    //             }
    //         }
    //     }
    //     stage('Quality Gate Status') {
    //                     when {
 			// 	expression { params.action == 'create' }
 			// 	}
    //         steps {
    //             script{
    //                 def sonarCredentialId = 'sonar-api'
    //                 QualityGateStatus(sonarCredentialId)
    //             }
    //         }
    //     }
		stage('Build Maven'){
            when { expression { params.action == 'create' } }
     		steps {
     	   script{
         		mvnBuild()
     		}
			} 	    
        }
        stage("Docker Image Build") {
	        steps {
	            script {
	                dockerBuild (  "${params.docker_repo}", "${params.aws_region}", "${params.aws_account_id}" )
	            }
	        }
	    }

        stage("Docker Image Scanning") {
	        steps {
	            script {
	                dockerImageScan ( "${params.docker_repo}", "${params.aws_region}", "${params.aws_account_id}")
	            }
	        }
	    }

        stage("Docker Image Push") {
	        steps {
	            script {
	                sh """
	                    aws configure set aws_access_key_id $ACCESS_KEY
                        aws configure set aws_secret_access_key $SECRET_KEY
                        aws configure set region ${params.aws_region}
	                """
	                dockerPush ( "${params.docker_repo}", "${params.aws_region}", "${params.aws_account_id}" )
	            }
	        }
	    }

	    stage("Docker CleanUP") {
	        steps {
                script {
	            dockerCleanup ( "${params.docker_repo}", "${params.aws_region}", "${params.aws_account_id}" )
			}
          }
		}

    }
}